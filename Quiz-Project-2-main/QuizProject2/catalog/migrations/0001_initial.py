# Generated by Django 4.2.3 on 2023-10-24 15:29

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Field",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Enter a test field (e.g. Science)", max_length=200
                    ),
                ),
            ],
            options={
                "verbose_name": "Test Field",
                "verbose_name_plural": "Test Fields",
            },
        ),
        migrations.CreateModel(
            name="Language",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[
                            ("English", "English"),
                            ("Spanish", "Spanish"),
                            ("French", "French"),
                        ],
                        help_text="Select a language for the question (e.g. English)",
                        max_length=100,
                        unique=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Language",
                "verbose_name_plural": "Languages",
            },
        ),
        migrations.CreateModel(
            name="Question",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        help_text="Unique ID for this particular question across the whole website.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "question_type",
                    models.CharField(
                        choices=[
                            ("m", "Multiple Choices"),
                            ("f", "Fill in the Gaps"),
                            ("i", "Multiple choice + image"),
                        ],
                        default="m",
                        help_text="Question type",
                        max_length=1,
                    ),
                ),
                (
                    "title",
                    models.TextField(
                        help_text="Enter a brief title for the question (e.g., On Convection...).",
                        max_length=1000,
                    ),
                ),
                (
                    "text",
                    models.TextField(
                        help_text="Supply the question text (e.g., What is 2+2?) or a longer text for multiple choice options.",
                        max_length=3000,
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        help_text="Optional image for image type or additional help.",
                        upload_to="",
                    ),
                ),
                (
                    "correct",
                    models.BooleanField(
                        default=False,
                        help_text="Set to True if this answer is marked as correct.",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="QuestionOption",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "option",
                    models.CharField(
                        help_text="Enter an option for the question.", max_length=200
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Test",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Enter a name for your test, e.g., module name or general title.",
                        max_length=200,
                    ),
                ),
                (
                    "summary",
                    models.TextField(
                        help_text="Enter a brief description of the Test.",
                        max_length=1000,
                    ),
                ),
                ("duration", models.DurationField(help_text="Duration of the test")),
                (
                    "time_limit",
                    models.DurationField(help_text="Time limit to complete the test"),
                ),
                (
                    "passing_score",
                    models.PositiveIntegerField(
                        help_text="Passing score required to pass the test"
                    ),
                ),
                (
                    "difficulty_level",
                    models.CharField(
                        help_text="Difficulty level of the test (e.g., easy, medium, difficult)",
                        max_length=100,
                    ),
                ),
                (
                    "published_date",
                    models.DateField(help_text="Date when the test was published"),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=True, help_text="Set to True if the test is public"
                    ),
                ),
                (
                    "total_score",
                    models.PositiveIntegerField(
                        help_text="Total marks or score for the test"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(help_text="Enter your first name", max_length=30),
                ),
                (
                    "last_name",
                    models.CharField(help_text="Enter your last name", max_length=30),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TestInstance",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        help_text="Identifier of an Exam instance, unique ID.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("start_time", models.DateTimeField(default=django.utils.timezone.now)),
                ("countdown_expired", models.BooleanField(default=False)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("u", "Undergoing"),
                            ("c", "Completed"),
                            ("n", "Not started"),
                        ],
                        default="n",
                        help_text="Current exam status.",
                        max_length=1,
                    ),
                ),
                (
                    "score",
                    models.PositiveIntegerField(
                        default=0, help_text="Score achieved in the test instance"
                    ),
                ),
                (
                    "submission_time",
                    models.DateTimeField(
                        blank=True,
                        help_text="Time when the user submitted the test",
                        null=True,
                    ),
                ),
                (
                    "exam",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="catalog.test",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User taking the test",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="test",
            name="author",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="catalog.userprofile",
            ),
        ),
        migrations.AddField(
            model_name="test",
            name="genre",
            field=models.ManyToManyField(
                help_text="Select a genre for this test.", to="catalog.field"
            ),
        ),
        migrations.AddField(
            model_name="test",
            name="questions",
            field=models.ManyToManyField(
                help_text="Select questions for this test.", to="catalog.question"
            ),
        ),
        migrations.AddField(
            model_name="question",
            name="answer",
            field=models.ForeignKey(
                help_text="Choose the correct answer option.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="correct_for",
                to="catalog.questionoption",
            ),
        ),
        migrations.AddField(
            model_name="question",
            name="field",
            field=models.ManyToManyField(
                help_text="Designate a queryable genre for the question (e.g. maths or Welding).",
                to="catalog.field",
            ),
        ),
        migrations.AddField(
            model_name="question",
            name="options",
            field=models.ManyToManyField(
                help_text="Options for this question.", to="catalog.questionoption"
            ),
        ),
    ]
